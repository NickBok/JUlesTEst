
upstream backendrc6 {
        # This should point to your RC6 app IP & port
	server 127.0.0.1:8080;
}

server { 
        server_name myserver.mydomain.com fail_timeout=0;

        # Redirect HTTP to HTTPS
        listen 80; 
        listen [::]:80;
		
        return 301 https://127.0.0.1:8080$request_uri; 
}

server {
        # Listen on HTTPS Port 443 with a valid certificate for encrypted communications
        # We will pass all requests to our backend RC6 app over HTTP at 127.0.0.1:22223
        # Responding back through Nginx/HTTPS to the requester

        server_name myserver.mydomain.com;

        listen 443 ssl;
        listen [::]:443 ssl;

        ssl_certificate domain.crt;
        ssl_certificate_key domain.rsa;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_dhparam /etc/ssl/certs/dhparam.pem;

        location / {
                        # Redirect all requests to your RC6 app
			proxy_pass http://backendrc6;
			proxy_set_header        Host $host:$server_port;
			proxy_set_header        X-Real-IP $remote_addr;
			proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header        X-Forwarded-Proto $scheme;
			proxy_redirect http:// https://;
        }
}